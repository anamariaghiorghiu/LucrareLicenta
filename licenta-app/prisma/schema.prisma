
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username String @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  bookmarks     Bookmark[]
  followedBy  User[] @relation("UserFollows")
  followings User[] @relation("UserFollows")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String     @id @default(cuid())
  title       String     @unique
  description String @db.Text
  slug        String @unique
  featuredImage String?
  html        String?     @db.Text
  text        String?     @db.Text
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  tags Tag[]
  comments Comment[]
  bookmarks Bookmark[]

  @@index([authorId])
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  slug        String
  posts       Post[]
}

model Comment{
  id          String     @id @default(cuid())
  userId String
  postId String
  user User @relation(fields:[userId], references: [id])
  post Post @relation(fields:[postId], references: [id])
  text String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt


  @@index([userId])
  @@index([postId])
}

model Bookmark {
  id String @id @default(cuid())

  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@index([postId])
}

model Painting {
  id        String   @id @default(cuid())
  userId    String
  image     String   @db.Text  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
